# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

# The pipeline is triggered automatically when changes are pushed to the main branch.

pool:
  vmImage: 'ubuntu-latest'

# The pipeline runs on a Ubuntu agent (ubuntu-latest), which is a virtual machine that executes the tasks defined in the pipeline.

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'Docker-Login'

# solution: Specifies the location of the solution file.
# buildPlatform: Specifies the build platform (Any CPU).
# buildConfiguration: Specifies the build configuration (Release).
# dockerRegistryServiceConnection: Refers to the Docker service connection in Azure DevOps, allowing authentication to a Docker registry.

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet CLI'

# Installs the NuGet command-line interface, which is used to manage .NET packages.

- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages'
  inputs:
    restoreSolution: '$(solution)'
  
# Restores the NuGet packages for the solution.

- task: PowerShell@2
  inputs:
    filePath: 'sonar-add-project-guid.ps1'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonar service connection'
    organization: 'ifejesuajayi'
    scannerMode: 'MSBuild'
    projectKey: 'IfejesuAjayi_AZURE_DEVOPS'
    projectName: 'AZURE_DEVOPS'

# Prepares sonar analysis config

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

# Builds the ASP.NET Core solution using the specified build configuration.

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: 'test'
    projects: '**/*[Tt]est/*.csproj'
    arguments: '--configuration  $(BuildConfiguration)'
    testRunTitle: 'Unit-Test'

# Executes unit tests within the solution.

- task: DotNetCoreCLI@2
  displayName: 'Publish Artifacts'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
  
# Publishes the build artifacts, which typically include the compiled binaries and other necessary files, to a staging directory.

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

# Publish sonarcloud's quality gate result on the Azure pipeline result

- task: SonarCloudAnalyze@1
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

# Run scanner and upload the results to SonarCloud

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'

# Publishes the build artifacts to Azure DevOps, making them available for later stages or deployments.

- task: Docker@2
  displayName: 'Docker Login'
  inputs:
    containerRegistry: '$(dockerRegistryServiceConnection)'
    command: 'login'
  
# Authenticates with the Docker registry using the Docker service connection credentials.

#- task: Docker@2
# displayName: 'Docker build and push'
#  inputs:
#    containerRegistry: '$(dockerRegistryServiceConnection)'
#    repository: 'ifejesuaj/test-dees'
#    command: 'buildAndPush'
#    Dockerfile: '**/Dockerfile'
  
# Builds a Docker image using the specified Dockerfile (**/Dockerfile).
# Pushes the built Docker image to the specified Docker repository (ifejesuaj/test-dees).

#- task: Docker@2
#  displayName: 'Build and push Docker image'
#  inputs:
#    containerRegistry: 'Azure container'  
#    repository: 'testtutt.azurecr.io/test-dees'
#    command: 'buildAndPush'
#    Dockerfile: '**/Dockerfile'
#    tags: 'latest'

- task: ACRTask@0
  inputs:
    azureSubscription: 'Test-Tutorial Azure resource manager'
    azureContainerRegistry: 'Testtutt'
    containerRepository: 'test-dees'
    contextType: 'file'
    contextPath: '$(System.DefaultWorkingDirectory)'
    dockerfileOrTaskFile: 'Dockerfile'
