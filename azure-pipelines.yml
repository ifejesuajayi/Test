# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

# The pipeline is triggered automatically when changes are pushed to the main branch.


variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'Docker-Login'

# solution: Specifies the location of the solution file.
# buildPlatform: Specifies the build platform (Any CPU).
# buildConfiguration: Specifies the build configuration (Release).
# dockerRegistryServiceConnection: Refers to the Docker service connection in Azure DevOps, allowing authentication to a Docker registry.


stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet CLI'

    # Installs the NuGet command-line interface, which is used to manage .NET packages.

    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: '$(solution)'
      
    # Restores the NuGet packages for the solution.

    - task: PowerShell@2
      inputs:
        filePath: 'sonar-add-project-guid.ps1'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar service connection'
        organization: 'ifejesuajayi'
        scannerMode: 'MSBuild'
        projectKey: 'IfejesuAjayi_AZURE_DEVOPS'
        projectName: 'AZURE_DEVOPS'

    # Prepares sonar analysis config

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    # Builds the ASP.NET Core solution using the specified build configuration.

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: '**/*[Tt]est/*.csproj'
        arguments: '--configuration  $(BuildConfiguration)'
        testRunTitle: 'Unit-Test'

    # Executes unit tests within the solution.

    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      
    # Publishes the build artifacts, which typically include the compiled binaries and other necessary files, to a staging directory.

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    # Publish sonarcloud's quality gate result on the Azure pipeline result

    - task: SonarCloudAnalyze@1
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'

    # Run scanner and upload the results to SonarCloud

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'


    - task: Docker@2
      inputs:
        containerRegistry: 'Azure-container-registry'
        repository: 'test-dees'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: $(Build.BuildId)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/Kubernetes_aks'
        artifact: 'manifests'
        publishLocation: 'pipeline'

#CI jobs can access the repo or external resources but CD jobs shouldn't. 
#To avoid the CD jobs accessing the repos, we take the manifests file and publish them so they can be available for other jobs


        

- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  jobs:
  - job: Build
    displayName: Deploy to AKS
    pool:
      vmImage: ubuntu-latest

    steps:
     - task: DownloadPipelineArtifact@2
       inputs:
          buildType: 'current'
          artifactName: 'manifests'
          targetPath: '$(Pipeline.Workspace)/manifests'